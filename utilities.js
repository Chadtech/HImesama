// Generated by CoffeeScript 1.10.0
(function() {
  var Utilities, _, activeElement, createElement, createTextNode, getElementById, isUpperCase, makeStyleString, querySelector, querySelectorAll, ref;

  _ = require('lodash');

  ref = require('./himesama-doc'), createTextNode = ref.createTextNode, getElementById = ref.getElementById, createElement = ref.createElement, querySelectorAll = ref.querySelectorAll, activeElement = ref.activeElement, querySelector = ref.querySelector;

  makeStyleString = require('./style-to-string');

  isUpperCase = function(l) {
    return l !== l.toLowerCase();
  };

  module.exports = Utilities = {
    htmlify: function(component) {
      var keys, output;
      if (_.isString(component)) {
        return createTextNode(component);
      } else {
        if (component.type === 'custom') {
          component = component.children[0];
        }
        keys = _.keys(component.attributes);
        output = _.reduce(keys, function(el, key) {
          var attribute, style;
          attribute = component.attributes[key];
          switch (key) {
            case 'className':
              el.setAttribute('class', attribute);
              break;
            case 'style':
              style = makeStyleString(attribute);
              el.setAttribute('style', style);
              break;
            case 'event':
              _.forEach(_.keys(attribute), (function(_this) {
                return function(event) {
                  var act;
                  act = attribute[event];
                  return el.addEventListener(event, act);
                };
              })(this));
              break;
            default:
              key = key.split('');
              key = _.reduce(key, function(str, char) {
                if (isUpperCase(char)) {
                  char = '-' + char.toLowerCase();
                }
                return str + char;
              });
              el.setAttribute(key, attribute);
          }
          return el;
        }, createElement(component.type));
        _.forEach(component.children, (function(_this) {
          return function(child) {
            return output.appendChild(_this.htmlify(child));
          };
        })(this));
        return output;
      }
    },
    getByAttribute: function(key, value) {
      return querySelector('[' + key + '="' + value + '"]');
    },
    getIndex: function(id) {
      var ci, output;
      output = '';
      ci = id.length - 1;
      while (id[ci] !== '.') {
        output = id[ci] + output;
        ci--;
      }
      return output;
    }
  };

}).call(this);
