// Generated by CoffeeScript 1.10.0
(function() {
  var Single, Text, _, createElement, createTextNode, deCamelCase, getElementById, htmlify, querySelector, querySelectorAll, ref, styleString;

  _ = require('lodash');

  styleString = require('./style-string.coffee');

  deCamelCase = require('./utilities').deCamelCase;

  ref = require('./doc'), getElementById = ref.getElementById, createTextNode = ref.createTextNode, createElement = ref.createElement, querySelectorAll = ref.querySelectorAll, querySelector = ref.querySelector;

  module.exports = htmlify = function(vo) {
    if (vo.type === 'custom') {
      vo = vo.children[0];
    }
    return _.reduce(vo.children, (function(_this) {
      return function(el, child) {
        child = htmlify(child);
        el.appendChild(child);
        return el;
      };
    })(this), Single(vo));
  };

  module.exports.Text = Text = function(vo) {
    return createTextNode(vo.content);
  };

  module.exports.Single = Single = function(vo) {
    if (vo.type === 'himesama-text') {
      return Text(vo);
    }
    return _.reduce(_.keys(vo.attributes), function(el, k) {
      var v;
      v = vo.attributes[k];
      k = deCamelCase(k);
      switch (k) {
        case 'class-name':
          el.setAttribute('class', v);
          break;
        case 'style':
          v = styleString(v);
          el.setAttribute(k, v);
          break;
        case 'event':
          _.forEach(_.keys(v), (function(_this) {
            return function(e) {
              return el.addEventListener(e, v[e]);
            };
          })(this));
          break;
        default:
          el.setAttribute(k, v);
      }
      return el;
    }, createElement(vo.type));
  };

}).call(this);
